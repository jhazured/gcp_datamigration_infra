pipeline {
    agent any

    parameters {
        choice(name: 'ENV', choices: ['dev', 'test', 'uat', 'prod'], description: 'Target environment')
        choice(name: 'ACTION', choices: [
            'terraform_apply', 'terraform_destroy',
            'build_and_deploy_images', 'delete_images'
        ], description: 'Action to perform')
    }

    environment {
        GCP_PROJECT_ID        = "your-gcp-project-id"
        GCP_REGION            = "us-central1"
        GCP_ARTIFACT_REPO     = "my-etl-repo"
        SERVICE_ACCOUNT_NAME  = "etl-service-account"
        GCP_CREDENTIALS_FILE  = "/tmp/gcp-key.json"

        DOCKER_REGISTRY       = "gcr.io/${GCP_PROJECT_ID}"

        IMAGE_UBUNTU          = "${DOCKER_REGISTRY}/ubuntu-etl:latest"
        IMAGE_ANSIBLE         = "${DOCKER_REGISTRY}/ansible-etl:latest"
        IMAGE_TERRAFORM       = "${DOCKER_REGISTRY}/terraform:latest"

        TERRAFORM_WORKDIR     = "terraform/envs/${params.ENV}"
    }

    options {
        timeout(time: 40, unit: 'MINUTES')
        ansiColor('xterm')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Authenticate to GCP') {
            steps {
                withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_KEY')]) {
                    sh 'cp $GCP_KEY $GCP_CREDENTIALS_FILE'
                    sh "gcloud auth activate-service-account --key-file=$GCP_CREDENTIALS_FILE"
                    sh "gcloud config set project ${GCP_PROJECT_ID}"
                    sh "gcloud auth configure-docker --quiet"
                }
            }
        }

        stage('Deploy Docker Images') {
            when { expression { params.ACTION == 'build_and_deploy_images' } }
            steps {
                script {
                    echo "Deploying Docker images using deploy_images.sh script..."
                    sh "./scripts/deploy_images.sh deploy latest"
                }
            }
        }

        stage('Delete Docker Images') {
            when { expression { params.ACTION == 'delete_images' } }
            steps {
                script {
                    echo "Removing Docker images using remove_images.sh script..."
                    sh "./scripts/remove_images.sh"
                }
            }
        }

        stage('Terraform Infra') {
            when { expression { params.ACTION == 'terraform_apply' || params.ACTION == 'terraform_destroy' } }
            steps {
                script {
                    echo "Starting Terraform container..."

                    // Run Terraform container with appropriate action and var-file
                    sh "docker run --rm -v ${WORKSPACE}/${TERRAFORM_WORKDIR}:/terraform -w /terraform ${IMAGE_TERRAFORM} ${params.ACTION} -var-file=terraform.tfvars"
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up credentials..."
            sh 'rm -f $GCP_CREDENTIALS_FILE'
        }
        success {
            echo "Pipeline succeeded."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
