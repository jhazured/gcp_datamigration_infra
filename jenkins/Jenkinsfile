pipeline {
    agent any

    parameters {
        choice(name: 'ENV', choices: ['dev', 'test', 'uat', 'prod'], description: 'Target environment')
        choice(name: 'ACTION', choices: [
            'init',
            'build_and_deploy_images',
            'delete_images',
            'terraform_apply',
            'terraform_destroy'
        ], description: 'Action to perform')
    }

    environment {
        GCP_PROJECT_ID        = "your-gcp-project-id"
        GCP_REGION            = "us-central1"
        GCP_ARTIFACT_REPO     = "my-etl-repo"
        SERVICE_ACCOUNT_NAME  = "etl-service-account"
        GCP_CREDENTIALS_FILE  = "/tmp/gcp-key.json"

        DOCKER_REGISTRY       = "gcr.io/${GCP_PROJECT_ID}"

        IMAGE_UBUNTU          = "${DOCKER_REGISTRY}/ubuntu-etl:latest"
        IMAGE_ANSIBLE         = "${DOCKER_REGISTRY}/ansible-etl:latest"
        IMAGE_TERRAFORM       = "${DOCKER_REGISTRY}/terraform:latest"

        TERRAFORM_WORKDIR     = "terraform/envs/${params.ENV}"
    }

    options {
        timeout(time: 10, unit: 'MINUTES')
        ansiColor('xterm')
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Init') {
            when { expression { params.ACTION == 'init' || params.ACTION in ['build_and_deploy_images', 'delete_images', 'terraform_apply', 'terraform_destroy'] } }
            steps {
                withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_KEY')]) {
                    script {
                        sh '''
                        cp $GCP_KEY $GCP_CREDENTIALS_FILE
                        gcloud auth activate-service-account --key-file=$GCP_CREDENTIALS_FILE
                        gcloud config set project ${GCP_PROJECT_ID}
                        gcloud auth configure-docker --quiet

                        ansible-playbook ansible/playbook/init.yml -e "gcp_project_id=${GCP_PROJECT_ID} env=${params.ENV}"
                        '''
                    }
                }
            }
        }

        stage('Build and Deploy Images') {
            when { expression { params.ACTION == 'build_and_deploy_images' } }
            steps {
                script {
                    sh """
                    ansible-playbook ansible/playbook/build_and_deploy_images.yml -e "gcp_project_id=${GCP_PROJECT_ID} env=${params.ENV}"
                    """
                }
            }
        }

        stage('Delete Images') {
            when { expression { params.ACTION == 'delete_images' } }
            steps {
                script {
                    sh """
                    ansible-playbook ansible/playbook/delete_images.yml -e "gcp_project_id=${GCP_PROJECT_ID} env=${params.ENV}"
                    """
                }
            }
        }

        stage('Terraform Infrastructure') {
            when { expression { params.ACTION == 'terraform_apply' || params.ACTION == 'terraform_destroy' } }
            steps {
                script {
                    sh """
                    docker run --rm -v ${WORKSPACE}/${TERRAFORM_WORKDIR}:/terraform -w /terraform ${IMAGE_TERRAFORM} ${params.ACTION} -var-file=terraform.tfvars
                    """
                }
            }
        }
    }

    post {
        always {
            sh "rm -f $GCP_CREDENTIALS_FILE"
        }
        success {
            echo "Pipeline succeeded."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
