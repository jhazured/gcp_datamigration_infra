pipeline {
    agent any

    parameters {
        choice(name: 'ENV', choices: ['dev', 'test', 'uat', 'prod'], description: 'Target environment')
        choice(name: 'ACTION', choices: ['terraform_apply', 'terraform_destroy', 'setup_gcp', 'decom_gcp'], description: 'Infrastructure action')
    }

    environment {
        GCP_PROJECT_ID        = "your-gcp-project-id"
        GCP_REGION            = "us-central1"
        GCP_ARTIFACT_REPO     = "my-etl-repo"
        SERVICE_ACCOUNT_NAME  = "etl-service-account"
        GCP_CREDENTIALS_FILE  = "/tmp/gcp-key.json"
        TERRAFORM_IMAGE       = "hashicorp/terraform:1.5.7"  // Use a fixed version for consistency
        TERRAFORM_WORKDIR     = "terraform/envs/${params.ENV}"
    }

    options {
        timeout(time: 20, unit: 'MINUTES')  // Timeout for the entire pipeline
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Authenticate to GCP') {
            steps {
                withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_KEY')]) {
                    sh 'cp $GCP_KEY $GCP_CREDENTIALS_FILE'
                    sh "gcloud auth activate-service-account --key-file=$GCP_CREDENTIALS_FILE"
                    sh "gcloud config set project ${GCP_PROJECT_ID}"
                }
            }
        }

        stage('Terraform Infra') {
            when {
                expression { params.ACTION == 'terraform_apply' || params.ACTION == 'terraform_destroy' }
            }
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    dir(TERRAFORM_WORKDIR) {
                        sh """
                            docker run --rm -v \$(pwd):/workspace -w /workspace/${TERRAFORM_WORKDIR} \\
                                -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json \\
                                -v $GCP_CREDENTIALS_FILE:/tmp/gcp-key.json:ro \\
                                ${TERRAFORM_IMAGE} init
                        """
                        script {
                            def tfCmd = (params.ACTION == 'terraform_apply') ? 'apply -auto-approve' : 'destroy -auto-approve'
                            sh """
                                docker run --rm -v \$(pwd):/workspace -w /workspace/${TERRAFORM_WORKDIR} \\
                                    -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json \\
                                    -v $GCP_CREDENTIALS_FILE:/tmp/gcp-key.json:ro \\
                                    ${TERRAFORM_IMAGE} ${tfCmd}
                            """
                        }
                    }
                }
            }
        }

        stage('Ansible Setup GCP') {
            when { expression { params.ACTION == 'setup_gcp' } }
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    sh """
                        docker run --rm \
                            -v \$(pwd)/ansible:/ansible \
                            -v \$(pwd)/env:/env \
                            -e GCP_PROJECT_ID=${GCP_PROJECT_ID} \
                            -e GCP_REGION=${GCP_REGION} \
                            -e GCP_ARTIFACT_REPO=${GCP_ARTIFACT_REPO} \
                            -e SERVICE_ACCOUNT_NAME=${SERVICE_ACCOUNT_NAME} \
                            -e ENV=${params.ENV} \
                            ansible_image:latest \
                            ansible-playbook /ansible/playbook/setup_gcp_resources.yml
                    """
                }
            }
        }

        stage('Ansible Decommission GCP') {
            when { expression { params.ACTION == 'decom_gcp' } }
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    sh """
                        docker run --rm \
                            -v \$(pwd)/ansible:/ansible \
                            -v \$(pwd)/env:/env \
                            -e GCP_PROJECT_ID=${GCP_PROJECT_ID} \
                            -e GCP_REGION=${GCP_REGION} \
                            -e GCP_ARTIFACT_REPO=${GCP_ARTIFACT_REPO} \
                            -e SERVICE_ACCOUNT_NAME=${SERVICE_ACCOUNT_NAME} \
                            -e ENV=${params.ENV} \
                            ansible_image:latest \
                            ansible-playbook /ansible/playbook/decom_gcp_resources.yml
                    """
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up credentials..."
            sh 'rm -f $GCP_CREDENTIALS_FILE'
        }
        success {
            echo "Infrastructure pipeline succeeded."
            // Add notification steps here (email/slack)
        }
        failure {
            echo "Infrastructure pipeline failed."
            // Add failure notifications here
        }
    }
}
